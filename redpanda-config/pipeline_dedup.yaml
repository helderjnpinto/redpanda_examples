# ============================================
# Redpanda Connect: PostgresQL â†’ ClickHouse (Deduped)
# ============================================

http:
  enabled: true
  address: 0.0.0.0:4195
  root_path: /connect
  debug_endpoints: true  # Enable debug endpoints for metrics

input:
  label: fetch_postgres
  sql_select:
    driver: postgres
    dsn: postgres://user:password@db:5432/redpanda_pipeline?sslmode=disable
    table: target_table
    columns: ["*"]
  processors:
    - log:
        level: INFO
        message: "Fetched row from Postgres: ID=${! this.id }, Name=${! this.name }, Email=${! this.email }"

buffer:
  none: {}

pipeline:
  threads: -1
  processors:
    # Map / normalize fields
    - bloblang: |
        root.id = this.id
        root.name = this.name
        root.email = this.email
        root.event_id = this.id.string()
    # Deduplicate based on ID (using Redis)
    - dedupe:
        cache: keycache
        key: ${! this.event_id }

output:
  sql_insert:
    driver: clickhouse
    dsn: "clickhouse://${CLICKHOUSE_USER}:${CLICKHOUSE_PASSWORD}@clickhouse:9000/analytics"
    table: events_raw
    columns:
      - id
      - name
      - email
    args_mapping: |
      root = [
        this.id,
        this.name,
        this.email
      ]
    batching:
      count: 1000
      period: 10s
  processors:
    - log:
        level: INFO
        message: "Inserting to ClickHouse: ID=${! this.id }"

# Redis cache to track processed keys
cache_resources:
  - label: keycache
    redis:
      url: redis://redis:6379
      default_ttl: 60s
      retries:
        initial_interval: 500ms
        max_interval: 1s
        max_elapsed_time: 5s