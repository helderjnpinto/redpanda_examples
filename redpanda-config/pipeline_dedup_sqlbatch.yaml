# ============================================
# Redpanda Connect: PostgresQL â†’ ClickHouse (Deduped + Batched)
# ============================================
input:
  generate:
    interval: '@every 5s' # Configure batch time
    mapping: 'root = {}'
  processors:
    - branch:
        processors:
          - cache:
              resource: batchcache
              operator: get
              key: last_id
        result_map: 'root.last_id = this' # if the key exist in cache it will return its value

      # We need this mapping because if this = null we can't convert directly to 0
    - mapping: |
        root.last_id = this.last_id.or(0)
    - log:
        level: INFO
        message: "Fetching rows with id > ${! this.last_id }"
    - sql_select:
        driver: postgres
        dsn: postgres://user:password@db:5432/redpanda_pipeline?sslmode=disable
        table: target_table
        columns: [ "*" ]
        where: id > ?
        args_mapping: |
          root = [ this.last_id ]
        suffix: ORDER BY id LIMIT 25

    # Check if sql_select returned no rows and exit if empty
    - mapping: |
        root = this
    - log:
        level: INFO
        message: "${! this.length() }}"
    - switch:
        - check: this.length() == 0
          processors:
            - log:
                level: INFO
                message: "No rows returned from database. Shutting down."
            - command:
                name: kill
                args_mapping: '[ "1" ]'

pipeline:
  processors:
    - unarchive:
        format: json_array
    - mapping: |
        root = this
    - cache:
        resource: batchcache
        operator: set
        key: last_id
        value: ${! this.id }
#    - log:
#        level: INFO
#        message: "Processing row ID=${! this.id }}"
    - dedupe:
        cache: keycache
        key: ${! this.id }

output:
  sql_insert:
    driver: clickhouse
    dsn: "clickhouse://${CLICKHOUSE_USER}:${CLICKHOUSE_PASSWORD}@clickhouse:9000/analytics"
    table: events_raw
    columns:
      - id
      - name
      - email
    args_mapping: |
      root = [
        this.id,
        this.name,
        this.email
      ]
#  processors:
#    - log:
#        level: INFO
#        message: "Inserting to ClickHouse: ID=${! this.id }"

cache_resources:
  # Redis cache to track processed keys
  - label: keycache
    redis:
      url: redis://redis:6379
      default_ttl: 60s
      retries:
        initial_interval: 500ms
        max_interval: 1s
        max_elapsed_time: 5s
  # Memory cache for last_id (batch mode)
  - label: batchcache
    memory: {}